* Defaults
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
#+END_SRC
* use-package
#+BEGIN_SRC emacs-lisp
  (require 'package)
  (setq package-enable-at-startup nil)
  (add-to-list 'package-archives
	       '("melpa" . "https://melpa.org/packages/"))

  (package-initialize)

  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
#+END_SRC

* Packages
** try
#+BEGIN_SRC emacs-lisp
  (use-package try
    :ensure t)
#+END_SRC
** which-key
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :config
    (which-key-mode))
#+END_SRC
** org-bullets
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+END_SRC
** evil
#+BEGIN_SRC emacs-lisp
  (use-package evil
    :ensure t
    :config
    (evil-mode 1))
#+END_SRC
** base16-theme
#+BEGIN_SRC emacs-lisp
  (use-package base16-theme
    :ensure t
    :config
    (load-theme 'base16-ashes t))
#+END_SRC
** linum-relative
#+BEGIN_SRC emacs-lisp
  (use-package linum-relative
    :ensure t
    :config
    (linum-relative-on)
    (setq linum-relative-current-symbol ""))
#+END_SRC
* Language Specific
** Haskell
*** haskell-mode
#+BEGIN_SRC emacs-lisp
  (use-package haskell-mode
    :ensure t
    :config
    (setq haskell-stylish-on-save t))
#+END_SRC
*** intero
#+BEGIN_SRC emacs-lisp
  (use-package intero
    :ensure t
    :config
    (add-hook 'haskell-mode-hook 'intero-mode))
#+END_SRC
